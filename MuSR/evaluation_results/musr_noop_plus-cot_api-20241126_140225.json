{
  "results": {
    "musr-noop-plus": {
      " ": " ",
      "alias": "musr-noop-plus"
    },
    "musr-noop-plus_murder_mysteries": {
      " ": " ",
      "alias": " - murder_mystery"
    },
    "musr-noop-plus_murder_mysteries_addition": {
      "alias": "  - musr-noop-plus_murder_mysteries_addition",
      "acc_norm,none": 0.512,
      "acc_norm_stderr,none": 0.03167708558254708
    },
    "musr-noop-plus_murder_mysteries_lexicon": {
      "alias": "  - musr-noop-plus_murder_mysteries_lexicon",
      "acc_norm,none": 0.52,
      "acc_norm_stderr,none": 0.031660853408495185
    },
    "musr-noop-plus_murder_mysteries_naive": {
      "alias": "  - musr-noop-plus_murder_mysteries_naive",
      "acc_norm,none": 0.524,
      "acc_norm_stderr,none": 0.03164968895968782
    }
  },
  "group_subtasks": {
    "musr-noop-plus_murder_mysteries": [
      "musr-noop-plus_murder_mysteries_naive",
      "musr-noop-plus_murder_mysteries_addition",
      "musr-noop-plus_murder_mysteries_lexicon"
    ],
    "musr-noop-plus": [
      "musr-noop-plus_murder_mysteries"
    ]
  },
  "configs": {
    "musr-noop-plus_murder_mysteries_addition": {
      "task": "musr-noop-plus_murder_mysteries_addition",
      "dataset_path": "LFrancis/MuSR-NoOp-Plus",
      "test_split": "murder_mysteries_addition",
      "doc_to_text": "def doc_to_text(doc):\n    \"\"\"\n    Convert a doc to text.\n    \"\"\"\n    choices = \"\"\n    for i, choice in enumerate(ast.literal_eval(doc[\"choices\"])):\n        choices += f\"{i + 1} - {choice}\\n\"\n\n    text = DOC_TO_TEXT.format(\n        narrative=doc[\"narrative\"], question=doc[\"question\"], choices=choices\n    )\n\n    return text\n",
      "doc_to_target": "{{answer_choice}}",
      "doc_to_choice": "{{choices}}",
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "num_fewshot": 0,
      "metric_list": [
        {
          "metric": "acc_norm",
          "aggregation": "mean",
          "higher_is_better": true
        }
      ],
      "output_type": "multiple_choice",
      "repeats": 1,
      "should_decontaminate": false,
      "metadata": {
        "version": 1.0
      }
    },
    "musr-noop-plus_murder_mysteries_lexicon": {
      "task": "musr-noop-plus_murder_mysteries_lexicon",
      "dataset_path": "LFrancis/MuSR-NoOp-Plus",
      "test_split": "murder_mysteries_lexicon",
      "doc_to_text": "def doc_to_text(doc):\n    \"\"\"\n    Convert a doc to text.\n    \"\"\"\n    choices = \"\"\n    for i, choice in enumerate(ast.literal_eval(doc[\"choices\"])):\n        choices += f\"{i + 1} - {choice}\\n\"\n\n    text = DOC_TO_TEXT.format(\n        narrative=doc[\"narrative\"], question=doc[\"question\"], choices=choices\n    )\n\n    return text\n",
      "doc_to_target": "{{answer_choice}}",
      "doc_to_choice": "{{choices}}",
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "num_fewshot": 0,
      "metric_list": [
        {
          "metric": "acc_norm",
          "aggregation": "mean",
          "higher_is_better": true
        }
      ],
      "output_type": "multiple_choice",
      "repeats": 1,
      "should_decontaminate": false,
      "metadata": {
        "version": 1.0
      }
    },
    "musr-noop-plus_murder_mysteries_naive": {
      "task": "musr-noop-plus_murder_mysteries_naive",
      "dataset_path": "LFrancis/MuSR-NoOp-Plus",
      "test_split": "murder_mysteries_naive",
      "doc_to_text": "def doc_to_text(doc):\n    \"\"\"\n    Convert a doc to text.\n    \"\"\"\n    choices = \"\"\n    for i, choice in enumerate(ast.literal_eval(doc[\"choices\"])):\n        choices += f\"{i + 1} - {choice}\\n\"\n\n    text = DOC_TO_TEXT.format(\n        narrative=doc[\"narrative\"], question=doc[\"question\"], choices=choices\n    )\n\n    return text\n",
      "doc_to_target": "{{answer_choice}}",
      "doc_to_choice": "{{choices}}",
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "num_fewshot": 0,
      "metric_list": [
        {
          "metric": "acc_norm",
          "aggregation": "mean",
          "higher_is_better": true
        }
      ],
      "output_type": "multiple_choice",
      "repeats": 1,
      "should_decontaminate": false,
      "metadata": {
        "version": 1.0
      }
    }
  },
  "versions": {
    "musr-noop-plus_murder_mysteries_addition": 1.0,
    "musr-noop-plus_murder_mysteries_lexicon": 1.0,
    "musr-noop-plus_murder_mysteries_naive": 1.0
  },
  "n-shot": {
    "musr-noop-plus_murder_mysteries_addition": 0,
    "musr-noop-plus_murder_mysteries_lexicon": 0,
    "musr-noop-plus_murder_mysteries_naive": 0
  },
  "higher_is_better": {
    "musr-noop-plus": {
      "acc_norm": true
    },
    "musr-noop-plus_murder_mysteries": {
      "acc_norm": true
    },
    "musr-noop-plus_murder_mysteries_addition": {
      "acc_norm": true
    },
    "musr-noop-plus_murder_mysteries_lexicon": {
      "acc_norm": true
    },
    "musr-noop-plus_murder_mysteries_naive": {
      "acc_norm": true
    }
  },
  "n-samples": {
    "musr-noop-plus_murder_mysteries_naive": {
      "original": 250,
      "effective": 250
    },
    "musr-noop-plus_murder_mysteries_addition": {
      "original": 250,
      "effective": 250
    },
    "musr-noop-plus_murder_mysteries_lexicon": {
      "original": 250,
      "effective": 250
    }
  },
  "config": {
    "model": "cot-api",
    "model_args": "pretrained=meta-llama/Llama-3.1-8B-Instruct,base_url=http://134.76.18.30:8081,api_backend=tgi,verbose=True,batch_size=500,num_concurrent=10,max_retries=0,n_cut_context_lines=1,temperature=0.5,create_tmp_file=True,log_pipeline=True,log_file=musr_noop_plus-cot_api-20241126_140225,",
    "batch_size": null,
    "batch_sizes": [],
    "device": null,
    "use_cache": null,
    "limit": null,
    "bootstrap_iters": 100000,
    "gen_kwargs": null,
    "random_seed": 0,
    "numpy_seed": 1234,
    "torch_seed": 1234,
    "fewshot_seed": 1234
  },
  "git_hash": "58c2c2ab",
  "date": 1732626145.294127,
  "pretty_env_info": "PyTorch version: 2.5.1\nIs debug build: False\nCUDA used to build PyTorch: None\nROCM used to build PyTorch: N/A\n\nOS: macOS 15.1.1 (arm64)\nGCC version: Could not collect\nClang version: 16.0.0 (clang-1600.0.26.4)\nCMake version: Could not collect\nLibc version: N/A\n\nPython version: 3.10.11 (v3.10.11:7d4cc5aa85, Apr  4 2023, 19:05:19) [Clang 13.0.0 (clang-1300.0.29.30)] (64-bit runtime)\nPython platform: macOS-15.1.1-arm64-arm-64bit\nIs CUDA available: False\nCUDA runtime version: No CUDA\nCUDA_MODULE_LOADING set to: N/A\nGPU models and configuration: No CUDA\nNvidia driver version: No CUDA\ncuDNN version: No CUDA\nHIP runtime version: N/A\nMIOpen runtime version: N/A\nIs XNNPACK available: True\n\nCPU:\nApple M1\n\nVersions of relevant libraries:\n[pip3] numpy==2.1.3\n[pip3] torch==2.5.1\n[conda] Could not collect",
  "transformers_version": "4.46.2",
  "upper_git_hash": null,
  "tokenizer_pad_token": [
    "<|eot_id|>",
    "128009"
  ],
  "tokenizer_eos_token": [
    "<|eot_id|>",
    "128009"
  ],
  "tokenizer_bos_token": [
    "<|begin_of_text|>",
    "128000"
  ],
  "eot_token_id": 128009,
  "max_length": 2047,
  "pipeline_args": {
    "pretrained": "meta-llama/Llama-3.1-8B-Instruct",
    "base_url": "http://134.76.18.30:8081",
    "api_backend": "tgi",
    "verbose": true,
    "batch_size": 500,
    "num_concurrent": 10,
    "max_retries": 0,
    "n_cut_context_lines": 1,
    "temperature": 0.5,
    "create_tmp_file": true,
    "log_pipeline": true,
    "pipeline_name": "cot-api",
    "task": "musr-noop-plus_murder_mysteries_naive",
    "limit": null
  },
  "compute": {
    "meta-llama/Llama-3.1-8B-Instruct": {
      "prompt_tokens": 2198645,
      "completion_tokens": 317467,
      "total_tokens": 2516112,
      "api_calls": 2250
    },
    "total": {},
    "n_tasks": 750
  },
  "all_kwargs": {
    "pretrained": "meta-llama/Llama-3.1-8B-Instruct",
    "base_url": "http://134.76.18.30:8081",
    "api_backend": "tgi",
    "tokenizer_backend": "huggingface",
    "temperature": 0.5,
    "max_gen_toks": 1000,
    "n_cut_context_lines": 1,
    "system_instruction": "{role_prompt} Solve the task provided by the user while thinking step by step. Make sure to state your answer at the end of the response.",
    "role_prompt": "You are a reasoning expert.",
    "final_answer_prompt": "Final answer of choices {choices_str}:",
    "batch_size": 500,
    "num_concurrent": 10,
    "max_retries": 0,
    "verbose": true,
    "log_file": "musr_noop_plus-cot_api-20241126_140225",
    "log_pipeline": true,
    "create_tmp_file": true,
    "seed": 1234,
    "args": [],
    "allowed_api_backends": [
      "vllm",
      "tgi"
    ]
  }
}