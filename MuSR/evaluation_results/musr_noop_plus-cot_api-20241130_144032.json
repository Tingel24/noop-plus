{
    "results": {
        "musr-noop-plus": {
            "acc_norm,none": 0.40185185185185185,
            "acc_norm_stderr,none": 0.007819623369475696,
            "alias": "musr-noop-plus"
        },
        "musr-noop-plus_murder_mysteries": {
            "acc_norm,none": 0.5176,
            "acc_norm_stderr,none": 0.014121082816826691,
            "alias": " - murder_mystery"
        },
        "musr-noop-plus_murder_mysteries_addition": {
            "alias": "  - musr-noop-plus_murder_mysteries_addition",
            "acc_norm,none": 0.472,
            "acc_norm_stderr,none": 0.031636489531544396
        },
        "musr-noop-plus_murder_mysteries_lexicon": {
            "alias": "  - musr-noop-plus_murder_mysteries_lexicon",
            "acc_norm,none": 0.488,
            "acc_norm_stderr,none": 0.03167708558254709
        },
        "musr-noop-plus_murder_mysteries_naive": {
            "alias": "  - musr-noop-plus_murder_mysteries_naive",
            "acc_norm,none": 0.544,
            "acc_norm_stderr,none": 0.03156328506121339
        },
        "musr-noop-plus_murder_mysteries_standard": {
            "alias": "  - musr-noop-plus_murder_mysteries_standard",
            "acc_norm,none": 0.576,
            "acc_norm_stderr,none": 0.03131803437491615
        },
        "musr-noop-plus_murder_mysteries_syntax": {
            "alias": "  - musr-noop-plus_murder_mysteries_syntax",
            "acc_norm,none": 0.508,
            "acc_norm_stderr,none": 0.0316821564314138
        },
        "musr-noop-plus_object_placements": {
            "acc_norm,none": 0.28046875,
            "acc_norm_stderr,none": 0.012574551731816425,
            "alias": " - object_placements"
        },
        "musr-noop-plus_object_placements_addition": {
            "alias": "  - musr-noop-plus_object_placements_addition",
            "acc_norm,none": 0.296875,
            "acc_norm_stderr,none": 0.028610997088737832
        },
        "musr-noop-plus_object_placements_lexicon": {
            "alias": "  - musr-noop-plus_object_placements_lexicon",
            "acc_norm,none": 0.27734375,
            "acc_norm_stderr,none": 0.02803528549328419
        },
        "musr-noop-plus_object_placements_naive": {
            "alias": "  - musr-noop-plus_object_placements_naive",
            "acc_norm,none": 0.296875,
            "acc_norm_stderr,none": 0.028610997088737832
        },
        "musr-noop-plus_object_placements_standard": {
            "alias": "  - musr-noop-plus_object_placements_standard",
            "acc_norm,none": 0.26171875,
            "acc_norm_stderr,none": 0.027526959754524398
        },
        "musr-noop-plus_object_placements_syntax": {
            "alias": "  - musr-noop-plus_object_placements_syntax",
            "acc_norm,none": 0.26953125,
            "acc_norm_stderr,none": 0.02778659256840428
        },
        "musr-noop-plus_team_allocation": {
            "acc_norm,none": 0.4104,
            "acc_norm_stderr,none": 0.013926808102926623,
            "alias": " - team_allocation"
        },
        "musr-noop-plus_team_allocation_addition": {
            "alias": "  - musr-noop-plus_team_allocation_addition",
            "acc_norm,none": 0.452,
            "acc_norm_stderr,none": 0.031539864492556614
        },
        "musr-noop-plus_team_allocation_lexicon": {
            "alias": "  - musr-noop-plus_team_allocation_lexicon",
            "acc_norm,none": 0.404,
            "acc_norm_stderr,none": 0.031096688184825295
        },
        "musr-noop-plus_team_allocation_naive": {
            "alias": "  - musr-noop-plus_team_allocation_naive",
            "acc_norm,none": 0.388,
            "acc_norm_stderr,none": 0.030881038748993922
        },
        "musr-noop-plus_team_allocation_standard": {
            "alias": "  - musr-noop-plus_team_allocation_standard",
            "acc_norm,none": 0.412,
            "acc_norm_stderr,none": 0.0311915960260229
        },
        "musr-noop-plus_team_allocation_syntax": {
            "alias": "  - musr-noop-plus_team_allocation_syntax",
            "acc_norm,none": 0.396,
            "acc_norm_stderr,none": 0.030993197854577843
        }
    },
    "groups": {
        "musr-noop-plus": {
            "acc_norm,none": 0.40185185185185185,
            "acc_norm_stderr,none": 0.007819623369475696,
            "alias": "musr-noop-plus"
        },
        "musr-noop-plus_murder_mysteries": {
            "acc_norm,none": 0.5176,
            "acc_norm_stderr,none": 0.014121082816826691,
            "alias": " - murder_mystery"
        },
        "musr-noop-plus_object_placements": {
            "acc_norm,none": 0.28046875,
            "acc_norm_stderr,none": 0.012574551731816425,
            "alias": " - object_placements"
        },
        "musr-noop-plus_team_allocation": {
            "acc_norm,none": 0.4104,
            "acc_norm_stderr,none": 0.013926808102926623,
            "alias": " - team_allocation"
        }
    },
    "group_subtasks": {
        "musr-noop-plus_team_allocation": [
            "musr-noop-plus_team_allocation_standard",
            "musr-noop-plus_team_allocation_naive",
            "musr-noop-plus_team_allocation_addition",
            "musr-noop-plus_team_allocation_lexicon",
            "musr-noop-plus_team_allocation_syntax"
        ],
        "musr-noop-plus_object_placements": [
            "musr-noop-plus_object_placements_standard",
            "musr-noop-plus_object_placements_naive",
            "musr-noop-plus_object_placements_addition",
            "musr-noop-plus_object_placements_lexicon",
            "musr-noop-plus_object_placements_syntax"
        ],
        "musr-noop-plus_murder_mysteries": [
            "musr-noop-plus_murder_mysteries_standard",
            "musr-noop-plus_murder_mysteries_naive",
            "musr-noop-plus_murder_mysteries_addition",
            "musr-noop-plus_murder_mysteries_lexicon",
            "musr-noop-plus_murder_mysteries_syntax"
        ],
        "musr-noop-plus": [
            "musr-noop-plus_murder_mysteries",
            "musr-noop-plus_object_placements",
            "musr-noop-plus_team_allocation"
        ]
    },
    "configs": {
        "musr-noop-plus_murder_mysteries_addition": {
            "task": "musr-noop-plus_murder_mysteries_addition",
            "dataset_path": "LFrancis/MuSR-NoOp-Plus",
            "dataset_name": "murder_mysteries_addition",
            "test_split": "train",
            "doc_to_text": "def doc_to_text(doc):\n    \"\"\"\n    Convert a doc to text.\n    \"\"\"\n    choices = \"\"\n    for i, choice in enumerate(ast.literal_eval(doc[\"choices\"])):\n        choices += f\"{i + 1} - {choice}\\n\"\n\n    text = DOC_TO_TEXT.format(\n        narrative=doc[\"narrative\"], question=doc[\"question\"], choices=choices\n    )\n\n    return text\n",
            "doc_to_target": "{{answer_choice}}",
            "doc_to_choice": "{{choices}}",
            "description": "",
            "target_delimiter": " ",
            "fewshot_delimiter": "\n\n",
            "num_fewshot": 0,
            "metric_list": [
                {
                    "metric": "acc_norm",
                    "aggregation": "mean",
                    "higher_is_better": true
                }
            ],
            "output_type": "multiple_choice",
            "repeats": 1,
            "should_decontaminate": false,
            "metadata": {
                "version": 1.0
            }
        },
        "musr-noop-plus_murder_mysteries_lexicon": {
            "task": "musr-noop-plus_murder_mysteries_lexicon",
            "dataset_path": "LFrancis/MuSR-NoOp-Plus",
            "dataset_name": "murder_mysteries_lexicon",
            "test_split": "train",
            "doc_to_text": "def doc_to_text(doc):\n    \"\"\"\n    Convert a doc to text.\n    \"\"\"\n    choices = \"\"\n    for i, choice in enumerate(ast.literal_eval(doc[\"choices\"])):\n        choices += f\"{i + 1} - {choice}\\n\"\n\n    text = DOC_TO_TEXT.format(\n        narrative=doc[\"narrative\"], question=doc[\"question\"], choices=choices\n    )\n\n    return text\n",
            "doc_to_target": "{{answer_choice}}",
            "doc_to_choice": "{{choices}}",
            "description": "",
            "target_delimiter": " ",
            "fewshot_delimiter": "\n\n",
            "num_fewshot": 0,
            "metric_list": [
                {
                    "metric": "acc_norm",
                    "aggregation": "mean",
                    "higher_is_better": true
                }
            ],
            "output_type": "multiple_choice",
            "repeats": 1,
            "should_decontaminate": false,
            "metadata": {
                "version": 1.0
            }
        },
        "musr-noop-plus_murder_mysteries_naive": {
            "task": "musr-noop-plus_murder_mysteries_naive",
            "dataset_path": "LFrancis/MuSR-NoOp-Plus",
            "dataset_name": "murder_mysteries_naive",
            "test_split": "train",
            "doc_to_text": "def doc_to_text(doc):\n    \"\"\"\n    Convert a doc to text.\n    \"\"\"\n    choices = \"\"\n    for i, choice in enumerate(ast.literal_eval(doc[\"choices\"])):\n        choices += f\"{i + 1} - {choice}\\n\"\n\n    text = DOC_TO_TEXT.format(\n        narrative=doc[\"narrative\"], question=doc[\"question\"], choices=choices\n    )\n\n    return text\n",
            "doc_to_target": "{{answer_choice}}",
            "doc_to_choice": "{{choices}}",
            "description": "",
            "target_delimiter": " ",
            "fewshot_delimiter": "\n\n",
            "num_fewshot": 0,
            "metric_list": [
                {
                    "metric": "acc_norm",
                    "aggregation": "mean",
                    "higher_is_better": true
                }
            ],
            "output_type": "multiple_choice",
            "repeats": 1,
            "should_decontaminate": false,
            "metadata": {
                "version": 1.0
            }
        },
        "musr-noop-plus_murder_mysteries_standard": {
            "task": "musr-noop-plus_murder_mysteries_standard",
            "dataset_path": "LFrancis/MuSR-NoOp-Plus",
            "dataset_name": "murder_mysteries",
            "test_split": "murder_mysteries",
            "doc_to_text": "def doc_to_text(doc):\n    \"\"\"\n    Convert a doc to text.\n    \"\"\"\n    choices = \"\"\n    for i, choice in enumerate(ast.literal_eval(doc[\"choices\"])):\n        choices += f\"{i + 1} - {choice}\\n\"\n\n    text = DOC_TO_TEXT.format(\n        narrative=doc[\"narrative\"], question=doc[\"question\"], choices=choices\n    )\n\n    return text\n",
            "doc_to_target": "{{answer_choice}}",
            "doc_to_choice": "{{choices}}",
            "description": "",
            "target_delimiter": " ",
            "fewshot_delimiter": "\n\n",
            "num_fewshot": 0,
            "metric_list": [
                {
                    "metric": "acc_norm",
                    "aggregation": "mean",
                    "higher_is_better": true
                }
            ],
            "output_type": "multiple_choice",
            "repeats": 1,
            "should_decontaminate": false,
            "metadata": {
                "version": 1.0
            }
        },
        "musr-noop-plus_murder_mysteries_syntax": {
            "task": "musr-noop-plus_murder_mysteries_syntax",
            "dataset_path": "LFrancis/MuSR-NoOp-Plus",
            "dataset_name": "murder_mysteries_syntax",
            "test_split": "train",
            "doc_to_text": "def doc_to_text(doc):\n    \"\"\"\n    Convert a doc to text.\n    \"\"\"\n    choices = \"\"\n    for i, choice in enumerate(ast.literal_eval(doc[\"choices\"])):\n        choices += f\"{i + 1} - {choice}\\n\"\n\n    text = DOC_TO_TEXT.format(\n        narrative=doc[\"narrative\"], question=doc[\"question\"], choices=choices\n    )\n\n    return text\n",
            "doc_to_target": "{{answer_choice}}",
            "doc_to_choice": "{{choices}}",
            "description": "",
            "target_delimiter": " ",
            "fewshot_delimiter": "\n\n",
            "num_fewshot": 0,
            "metric_list": [
                {
                    "metric": "acc_norm",
                    "aggregation": "mean",
                    "higher_is_better": true
                }
            ],
            "output_type": "multiple_choice",
            "repeats": 1,
            "should_decontaminate": false,
            "metadata": {
                "version": 1.0
            }
        },
        "musr-noop-plus_object_placements_addition": {
            "task": "musr-noop-plus_object_placements_addition",
            "dataset_path": "LFrancis/MuSR-NoOp-Plus",
            "dataset_name": "object_placements_addition",
            "test_split": "train",
            "doc_to_text": "def doc_to_text(doc):\n    \"\"\"\n    Convert a doc to text.\n    \"\"\"\n    choices = \"\"\n    for i, choice in enumerate(ast.literal_eval(doc[\"choices\"])):\n        choices += f\"{i + 1} - {choice}\\n\"\n\n    text = DOC_TO_TEXT.format(\n        narrative=doc[\"narrative\"], question=doc[\"question\"], choices=choices\n    )\n\n    return text\n",
            "doc_to_target": "{{answer_choice}}",
            "doc_to_choice": "{{choices}}",
            "description": "",
            "target_delimiter": " ",
            "fewshot_delimiter": "\n\n",
            "num_fewshot": 0,
            "metric_list": [
                {
                    "metric": "acc_norm",
                    "aggregation": "mean",
                    "higher_is_better": true
                }
            ],
            "output_type": "multiple_choice",
            "repeats": 1,
            "should_decontaminate": false,
            "metadata": {
                "version": 1.0
            }
        },
        "musr-noop-plus_object_placements_lexicon": {
            "task": "musr-noop-plus_object_placements_lexicon",
            "dataset_path": "LFrancis/MuSR-NoOp-Plus",
            "dataset_name": "object_placements_lexicon",
            "test_split": "train",
            "doc_to_text": "def doc_to_text(doc):\n    \"\"\"\n    Convert a doc to text.\n    \"\"\"\n    choices = \"\"\n    for i, choice in enumerate(ast.literal_eval(doc[\"choices\"])):\n        choices += f\"{i + 1} - {choice}\\n\"\n\n    text = DOC_TO_TEXT.format(\n        narrative=doc[\"narrative\"], question=doc[\"question\"], choices=choices\n    )\n\n    return text\n",
            "doc_to_target": "{{answer_choice}}",
            "doc_to_choice": "{{choices}}",
            "description": "",
            "target_delimiter": " ",
            "fewshot_delimiter": "\n\n",
            "num_fewshot": 0,
            "metric_list": [
                {
                    "metric": "acc_norm",
                    "aggregation": "mean",
                    "higher_is_better": true
                }
            ],
            "output_type": "multiple_choice",
            "repeats": 1,
            "should_decontaminate": false,
            "metadata": {
                "version": 1.0
            }
        },
        "musr-noop-plus_object_placements_naive": {
            "task": "musr-noop-plus_object_placements_naive",
            "dataset_path": "LFrancis/MuSR-NoOp-Plus",
            "dataset_name": "object_placements_naive",
            "test_split": "train",
            "doc_to_text": "def doc_to_text(doc):\n    \"\"\"\n    Convert a doc to text.\n    \"\"\"\n    choices = \"\"\n    for i, choice in enumerate(ast.literal_eval(doc[\"choices\"])):\n        choices += f\"{i + 1} - {choice}\\n\"\n\n    text = DOC_TO_TEXT.format(\n        narrative=doc[\"narrative\"], question=doc[\"question\"], choices=choices\n    )\n\n    return text\n",
            "doc_to_target": "{{answer_choice}}",
            "doc_to_choice": "{{choices}}",
            "description": "",
            "target_delimiter": " ",
            "fewshot_delimiter": "\n\n",
            "num_fewshot": 0,
            "metric_list": [
                {
                    "metric": "acc_norm",
                    "aggregation": "mean",
                    "higher_is_better": true
                }
            ],
            "output_type": "multiple_choice",
            "repeats": 1,
            "should_decontaminate": false,
            "metadata": {
                "version": 1.0
            }
        },
        "musr-noop-plus_object_placements_standard": {
            "task": "musr-noop-plus_object_placements_standard",
            "dataset_path": "LFrancis/MuSR-NoOp-Plus",
            "dataset_name": "object_placements",
            "test_split": "object_placements",
            "doc_to_text": "def doc_to_text(doc):\n    \"\"\"\n    Convert a doc to text.\n    \"\"\"\n    choices = \"\"\n    for i, choice in enumerate(ast.literal_eval(doc[\"choices\"])):\n        choices += f\"{i + 1} - {choice}\\n\"\n\n    text = DOC_TO_TEXT.format(\n        narrative=doc[\"narrative\"], question=doc[\"question\"], choices=choices\n    )\n\n    return text\n",
            "doc_to_target": "{{answer_choice}}",
            "doc_to_choice": "{{choices}}",
            "description": "",
            "target_delimiter": " ",
            "fewshot_delimiter": "\n\n",
            "num_fewshot": 0,
            "metric_list": [
                {
                    "metric": "acc_norm",
                    "aggregation": "mean",
                    "higher_is_better": true
                }
            ],
            "output_type": "multiple_choice",
            "repeats": 1,
            "should_decontaminate": false,
            "metadata": {
                "version": 1.0
            }
        },
        "musr-noop-plus_object_placements_syntax": {
            "task": "musr-noop-plus_object_placements_syntax",
            "dataset_path": "LFrancis/MuSR-NoOp-Plus",
            "dataset_name": "object_placements_syntax",
            "test_split": "train",
            "doc_to_text": "def doc_to_text(doc):\n    \"\"\"\n    Convert a doc to text.\n    \"\"\"\n    choices = \"\"\n    for i, choice in enumerate(ast.literal_eval(doc[\"choices\"])):\n        choices += f\"{i + 1} - {choice}\\n\"\n\n    text = DOC_TO_TEXT.format(\n        narrative=doc[\"narrative\"], question=doc[\"question\"], choices=choices\n    )\n\n    return text\n",
            "doc_to_target": "{{answer_choice}}",
            "doc_to_choice": "{{choices}}",
            "description": "",
            "target_delimiter": " ",
            "fewshot_delimiter": "\n\n",
            "num_fewshot": 0,
            "metric_list": [
                {
                    "metric": "acc_norm",
                    "aggregation": "mean",
                    "higher_is_better": true
                }
            ],
            "output_type": "multiple_choice",
            "repeats": 1,
            "should_decontaminate": false,
            "metadata": {
                "version": 1.0
            }
        },
        "musr-noop-plus_team_allocation_addition": {
            "task": "musr-noop-plus_team_allocation_addition",
            "dataset_path": "LFrancis/MuSR-NoOp-Plus",
            "dataset_name": "team_allocation_addition",
            "test_split": "train",
            "doc_to_text": "def doc_to_text(doc):\n    \"\"\"\n    Convert a doc to text.\n    \"\"\"\n    choices = \"\"\n    for i, choice in enumerate(ast.literal_eval(doc[\"choices\"])):\n        choices += f\"{i + 1} - {choice}\\n\"\n\n    text = DOC_TO_TEXT.format(\n        narrative=doc[\"narrative\"], question=doc[\"question\"], choices=choices\n    )\n\n    return text\n",
            "doc_to_target": "{{answer_choice}}",
            "doc_to_choice": "{{choices}}",
            "description": "",
            "target_delimiter": " ",
            "fewshot_delimiter": "\n\n",
            "num_fewshot": 0,
            "metric_list": [
                {
                    "metric": "acc_norm",
                    "aggregation": "mean",
                    "higher_is_better": true
                }
            ],
            "output_type": "multiple_choice",
            "repeats": 1,
            "should_decontaminate": false,
            "metadata": {
                "version": 1.0
            }
        },
        "musr-noop-plus_team_allocation_lexicon": {
            "task": "musr-noop-plus_team_allocation_lexicon",
            "dataset_path": "LFrancis/MuSR-NoOp-Plus",
            "dataset_name": "team_allocation_lexicon",
            "test_split": "train",
            "doc_to_text": "def doc_to_text(doc):\n    \"\"\"\n    Convert a doc to text.\n    \"\"\"\n    choices = \"\"\n    for i, choice in enumerate(ast.literal_eval(doc[\"choices\"])):\n        choices += f\"{i + 1} - {choice}\\n\"\n\n    text = DOC_TO_TEXT.format(\n        narrative=doc[\"narrative\"], question=doc[\"question\"], choices=choices\n    )\n\n    return text\n",
            "doc_to_target": "{{answer_choice}}",
            "doc_to_choice": "{{choices}}",
            "description": "",
            "target_delimiter": " ",
            "fewshot_delimiter": "\n\n",
            "num_fewshot": 0,
            "metric_list": [
                {
                    "metric": "acc_norm",
                    "aggregation": "mean",
                    "higher_is_better": true
                }
            ],
            "output_type": "multiple_choice",
            "repeats": 1,
            "should_decontaminate": false,
            "metadata": {
                "version": 1.0
            }
        },
        "musr-noop-plus_team_allocation_naive": {
            "task": "musr-noop-plus_team_allocation_naive",
            "dataset_path": "LFrancis/MuSR-NoOp-Plus",
            "dataset_name": "team_allocation_naive",
            "test_split": "train",
            "doc_to_text": "def doc_to_text(doc):\n    \"\"\"\n    Convert a doc to text.\n    \"\"\"\n    choices = \"\"\n    for i, choice in enumerate(ast.literal_eval(doc[\"choices\"])):\n        choices += f\"{i + 1} - {choice}\\n\"\n\n    text = DOC_TO_TEXT.format(\n        narrative=doc[\"narrative\"], question=doc[\"question\"], choices=choices\n    )\n\n    return text\n",
            "doc_to_target": "{{answer_choice}}",
            "doc_to_choice": "{{choices}}",
            "description": "",
            "target_delimiter": " ",
            "fewshot_delimiter": "\n\n",
            "num_fewshot": 0,
            "metric_list": [
                {
                    "metric": "acc_norm",
                    "aggregation": "mean",
                    "higher_is_better": true
                }
            ],
            "output_type": "multiple_choice",
            "repeats": 1,
            "should_decontaminate": false,
            "metadata": {
                "version": 1.0
            }
        },
        "musr-noop-plus_team_allocation_standard": {
            "task": "musr-noop-plus_team_allocation_standard",
            "dataset_path": "LFrancis/MuSR-NoOp-Plus",
            "dataset_name": "team_allocation",
            "test_split": "team_allocation",
            "doc_to_text": "def doc_to_text(doc):\n    \"\"\"\n    Convert a doc to text.\n    \"\"\"\n    choices = \"\"\n    for i, choice in enumerate(ast.literal_eval(doc[\"choices\"])):\n        choices += f\"{i + 1} - {choice}\\n\"\n\n    text = DOC_TO_TEXT.format(\n        narrative=doc[\"narrative\"], question=doc[\"question\"], choices=choices\n    )\n\n    return text\n",
            "doc_to_target": "{{answer_choice}}",
            "doc_to_choice": "{{choices}}",
            "description": "",
            "target_delimiter": " ",
            "fewshot_delimiter": "\n\n",
            "num_fewshot": 0,
            "metric_list": [
                {
                    "metric": "acc_norm",
                    "aggregation": "mean",
                    "higher_is_better": true
                }
            ],
            "output_type": "multiple_choice",
            "repeats": 1,
            "should_decontaminate": false,
            "metadata": {
                "version": 1.0
            }
        },
        "musr-noop-plus_team_allocation_syntax": {
            "task": "musr-noop-plus_team_allocation_syntax",
            "dataset_path": "LFrancis/MuSR-NoOp-Plus",
            "dataset_name": "team_allocation_syntax",
            "test_split": "train",
            "doc_to_text": "def doc_to_text(doc):\n    \"\"\"\n    Convert a doc to text.\n    \"\"\"\n    choices = \"\"\n    for i, choice in enumerate(ast.literal_eval(doc[\"choices\"])):\n        choices += f\"{i + 1} - {choice}\\n\"\n\n    text = DOC_TO_TEXT.format(\n        narrative=doc[\"narrative\"], question=doc[\"question\"], choices=choices\n    )\n\n    return text\n",
            "doc_to_target": "{{answer_choice}}",
            "doc_to_choice": "{{choices}}",
            "description": "",
            "target_delimiter": " ",
            "fewshot_delimiter": "\n\n",
            "num_fewshot": 0,
            "metric_list": [
                {
                    "metric": "acc_norm",
                    "aggregation": "mean",
                    "higher_is_better": true
                }
            ],
            "output_type": "multiple_choice",
            "repeats": 1,
            "should_decontaminate": false,
            "metadata": {
                "version": 1.0
            }
        }
    },
    "versions": {
        "musr-noop-plus_murder_mysteries_addition": 1.0,
        "musr-noop-plus_murder_mysteries_lexicon": 1.0,
        "musr-noop-plus_murder_mysteries_naive": 1.0,
        "musr-noop-plus_murder_mysteries_standard": 1.0,
        "musr-noop-plus_murder_mysteries_syntax": 1.0,
        "musr-noop-plus_object_placements_addition": 1.0,
        "musr-noop-plus_object_placements_lexicon": 1.0,
        "musr-noop-plus_object_placements_naive": 1.0,
        "musr-noop-plus_object_placements_standard": 1.0,
        "musr-noop-plus_object_placements_syntax": 1.0,
        "musr-noop-plus_team_allocation_addition": 1.0,
        "musr-noop-plus_team_allocation_lexicon": 1.0,
        "musr-noop-plus_team_allocation_naive": 1.0,
        "musr-noop-plus_team_allocation_standard": 1.0,
        "musr-noop-plus_team_allocation_syntax": 1.0
    },
    "n-shot": {
        "musr-noop-plus_murder_mysteries_addition": 0,
        "musr-noop-plus_murder_mysteries_lexicon": 0,
        "musr-noop-plus_murder_mysteries_naive": 0,
        "musr-noop-plus_murder_mysteries_standard": 0,
        "musr-noop-plus_murder_mysteries_syntax": 0,
        "musr-noop-plus_object_placements_addition": 0,
        "musr-noop-plus_object_placements_lexicon": 0,
        "musr-noop-plus_object_placements_naive": 0,
        "musr-noop-plus_object_placements_standard": 0,
        "musr-noop-plus_object_placements_syntax": 0,
        "musr-noop-plus_team_allocation_addition": 0,
        "musr-noop-plus_team_allocation_lexicon": 0,
        "musr-noop-plus_team_allocation_naive": 0,
        "musr-noop-plus_team_allocation_standard": 0,
        "musr-noop-plus_team_allocation_syntax": 0
    },
    "higher_is_better": {
        "musr-noop-plus": {
            "acc_norm": true
        },
        "musr-noop-plus_murder_mysteries": {
            "acc_norm": true
        },
        "musr-noop-plus_murder_mysteries_addition": {
            "acc_norm": true
        },
        "musr-noop-plus_murder_mysteries_lexicon": {
            "acc_norm": true
        },
        "musr-noop-plus_murder_mysteries_naive": {
            "acc_norm": true
        },
        "musr-noop-plus_murder_mysteries_standard": {
            "acc_norm": true
        },
        "musr-noop-plus_murder_mysteries_syntax": {
            "acc_norm": true
        },
        "musr-noop-plus_object_placements": {
            "acc_norm": true
        },
        "musr-noop-plus_object_placements_addition": {
            "acc_norm": true
        },
        "musr-noop-plus_object_placements_lexicon": {
            "acc_norm": true
        },
        "musr-noop-plus_object_placements_naive": {
            "acc_norm": true
        },
        "musr-noop-plus_object_placements_standard": {
            "acc_norm": true
        },
        "musr-noop-plus_object_placements_syntax": {
            "acc_norm": true
        },
        "musr-noop-plus_team_allocation": {
            "acc_norm": true
        },
        "musr-noop-plus_team_allocation_addition": {
            "acc_norm": true
        },
        "musr-noop-plus_team_allocation_lexicon": {
            "acc_norm": true
        },
        "musr-noop-plus_team_allocation_naive": {
            "acc_norm": true
        },
        "musr-noop-plus_team_allocation_standard": {
            "acc_norm": true
        },
        "musr-noop-plus_team_allocation_syntax": {
            "acc_norm": true
        }
    },
    "n-samples": {
        "musr-noop-plus_murder_mysteries_standard": {
            "original": 250,
            "effective": 250
        },
        "musr-noop-plus_murder_mysteries_naive": {
            "original": 250,
            "effective": 250
        },
        "musr-noop-plus_murder_mysteries_addition": {
            "original": 250,
            "effective": 250
        },
        "musr-noop-plus_murder_mysteries_lexicon": {
            "original": 250,
            "effective": 250
        },
        "musr-noop-plus_murder_mysteries_syntax": {
            "original": 250,
            "effective": 250
        },
        "musr-noop-plus_object_placements_standard": {
            "original": 256,
            "effective": 256
        },
        "musr-noop-plus_object_placements_naive": {
            "original": 256,
            "effective": 256
        },
        "musr-noop-plus_object_placements_addition": {
            "original": 256,
            "effective": 256
        },
        "musr-noop-plus_object_placements_lexicon": {
            "original": 256,
            "effective": 256
        },
        "musr-noop-plus_object_placements_syntax": {
            "original": 256,
            "effective": 256
        },
        "musr-noop-plus_team_allocation_standard": {
            "original": 250,
            "effective": 250
        },
        "musr-noop-plus_team_allocation_naive": {
            "original": 250,
            "effective": 250
        },
        "musr-noop-plus_team_allocation_addition": {
            "original": 250,
            "effective": 250
        },
        "musr-noop-plus_team_allocation_lexicon": {
            "original": 250,
            "effective": 250
        },
        "musr-noop-plus_team_allocation_syntax": {
            "original": 250,
            "effective": 250
        }
    },
    "config": {
        "model": "cot-api",
        "model_args": "pretrained=meta-llama/Llama-3.1-8B-Instruct,base_url=http://134.76.18.30:8081,api_backend=tgi,verbose=True,batch_size=500,num_concurrent=10,max_retries=0,n_cut_context_lines=1,temperature=0.5,create_tmp_file=True,log_pipeline=True,log_file=musr_noop_plus-cot_api-20241130_144032,",
        "batch_size": null,
        "batch_sizes": [],
        "device": null,
        "use_cache": null,
        "limit": null,
        "bootstrap_iters": 100000,
        "gen_kwargs": null,
        "random_seed": 0,
        "numpy_seed": 1234,
        "torch_seed": 1234,
        "fewshot_seed": 1234
    },
    "git_hash": "6b76590d",
    "date": 1732974032.47959,
    "pretty_env_info": "PyTorch version: 2.5.1\nIs debug build: False\nCUDA used to build PyTorch: None\nROCM used to build PyTorch: N/A\n\nOS: macOS 15.1.1 (arm64)\nGCC version: Could not collect\nClang version: 16.0.0 (clang-1600.0.26.4)\nCMake version: Could not collect\nLibc version: N/A\n\nPython version: 3.10.11 (v3.10.11:7d4cc5aa85, Apr  4 2023, 19:05:19) [Clang 13.0.0 (clang-1300.0.29.30)] (64-bit runtime)\nPython platform: macOS-15.1.1-arm64-arm-64bit\nIs CUDA available: False\nCUDA runtime version: No CUDA\nCUDA_MODULE_LOADING set to: N/A\nGPU models and configuration: No CUDA\nNvidia driver version: No CUDA\ncuDNN version: No CUDA\nHIP runtime version: N/A\nMIOpen runtime version: N/A\nIs XNNPACK available: True\n\nCPU:\nApple M1\n\nVersions of relevant libraries:\n[pip3] numpy==2.1.3\n[pip3] torch==2.5.1\n[conda] Could not collect",
    "transformers_version": "4.46.2",
    "upper_git_hash": null,
    "tokenizer_pad_token": [
        "<|eot_id|>",
        "128009"
    ],
    "tokenizer_eos_token": [
        "<|eot_id|>",
        "128009"
    ],
    "tokenizer_bos_token": [
        "<|begin_of_text|>",
        "128000"
    ],
    "eot_token_id": 128009,
    "max_length": 2047,
    "pipeline_args": {
        "pretrained": "meta-llama/Llama-3.1-8B-Instruct",
        "base_url": "http://134.76.18.30:8081",
        "api_backend": "tgi",
        "verbose": true,
        "batch_size": 500,
        "num_concurrent": 10,
        "max_retries": 0,
        "n_cut_context_lines": 1,
        "temperature": 0.5,
        "create_tmp_file": true,
        "log_pipeline": true,
        "pipeline_name": "cot-api",
        "task": "musr-noop-plus_team_allocation_syntax",
        "limit": null
    },
    "compute": {
        "meta-llama/Llama-3.1-8B-Instruct": {
            "prompt_tokens": 9147598,
            "completion_tokens": 1312447,
            "total_tokens": 10460045,
            "api_calls": 14770
        },
        "total": {},
        "n_tasks": 3780
    },
    "all_kwargs": {
        "pretrained": "meta-llama/Llama-3.1-8B-Instruct",
        "base_url": "http://134.76.18.30:8081",
        "api_backend": "tgi",
        "tokenizer_backend": "huggingface",
        "temperature": 0.5,
        "max_gen_toks": 1000,
        "n_cut_context_lines": 1,
        "system_instruction": "{role_prompt} Solve the task provided by the user while thinking step by step. Make sure to state your answer at the end of the response.",
        "role_prompt": "You are a reasoning expert.",
        "final_answer_prompt": "Final answer of choices {choices_str}:",
        "batch_size": 500,
        "num_concurrent": 10,
        "max_retries": 0,
        "verbose": true,
        "log_file": "musr_noop_plus-cot_api-20241130_144032",
        "log_pipeline": true,
        "create_tmp_file": true,
        "seed": 1234,
        "args": [],
        "allowed_api_backends": [
            "vllm",
            "tgi"
        ]
    }
}